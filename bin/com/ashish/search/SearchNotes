1. Linear Search:
-----------------

Linear search or sequential search is a method for finding a particular value in a list, that consists of checking every one of its elements, 
one at a time and in sequence, until the desired one is found.

Linear search is the simplest search algorithm. For a list with n items, the best case is when the value is equal to the first element 
of the list, in which case only one comparison is needed. The worst case is when the value is not in the list
(or occurs only once at the end of the list), in which case n comparisons are needed.

The worst case performance scenario for a linear search is that it has to loop through the entire collection, either because 
the item is the last one, or because the item is not found. In other words, if you have N items in your collection, 
the worst case scenario to find an item is N iterations. In Big O Notation it is O(N). 
The speed of search grows linearly with the number of items within your collection.

Linear searches don't require the collection to be sorted.

ex: LinearSearch.java

-------------------------------------------------------------------------------------------------------------------------------------------

2. BinarySearch:
----------------

A binary search or half-interval search algorithm finds the position of a specified value (the input "key") within a sorted array. 
In each step, the algorithm compares the input key value with the key value of the middle element of the array. If the keys match,
 then a matching element has been found so its index, or position, is returned. Otherwise, if the sought key is less than the middle 
 element's key, then the algorithm repeats its action on the sub-array to the left of the middle element or, if the input key is greater, 
 on the sub-array to the right. If the remaining array to be searched is reduced to zero, then the key cannot be found in the array and 
 a special "Not found" indication is returned.

Every iteration eliminates half of the remaining possibilities. This makes binary searches very efficient - even for large collections.

Binary search requires a sorted collection. Also, binary searching can only be applied to a collection that allows random access (indexing).

Worst case performance: O(log n)

Best case performance: O(1)

eg: BinarySearch.java
-------------------------------------------------------------------------------------------------------------------------------------------

3. BinarySearch Implemented by Recursive:
-----------------------------------------

Recursion is used in this algorithm because with each pass a new array is created by cutting the old one in half. 
The binary search procedure is then called recursively, this time on the new array. 
Typically the array's size is adjusted by manipulating a beginning and ending index. 
The algorithm exhibits a logarithmic order of growth because it essentially divides the problem domain in half with each pass. 

eg: MyRecursiveBinarySearch .java

All algorithmms:
----------------

url : http://www.java2novice.com/java-search-algorithms/linear-search/

